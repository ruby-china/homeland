// turbolinks-prefetch@1.0.4 downloaded from https://ga.jspm.io/npm:turbolinks-prefetch@1.0.4/index.js

class Prefetcher{start(t=50){this.delay=t||this.delay;document.addEventListener("mouseover",(t=>{this.mouseover(t)}))}constructor(t){this.delay=50;this.fetchers={};this.doc=document.implementation.createHTMLDocument("prefetch");this.xhr=new XMLHttpRequest;this.controller=t;this.controller.getActionForLink=t=>this.getActionForLink(t)}mouseover(t){const{target:e}=t;if(!e)return;if(e.hasAttribute("data-remote"))return;if(e.hasAttribute("data-method"))return;if("false"===e.getAttribute("data-prefetch"))return;if("_blank"===e.getAttribute("target"))return;const r=e.getAttribute("href")||e.getAttribute("data-prefetch");if(r&&!r.startsWith("#")&&!r.startsWith("mailto:")&&!r.startsWith("tel:")&&(!r.includes("://")||r.startsWith(window.location.origin))&&!this.prefetched(r)&&!this.prefetching(r)){this.cleanup(t,r);if(t.target){t.target.addEventListener("mouseleave",(t=>this.mouseleave(t,r)));t.target.addEventListener("mousedown",(t=>this.mouseleave(t,r)))}this.fetchers[r]=setTimeout((()=>this.prefetch(r)),this.delay)}}mouseleave(t,e){this.xhr.abort();this.cleanup(t,e)}cleanup(t,e){const r=t.target;clearTimeout(this.fetchers[e]);this.fetchers[e]=null;r&&r.removeEventListener("mouseleave",(t=>this.mouseleave(t)))}fetchPage(t,e){const{xhr:r}=this;r.open("GET",t);r.setRequestHeader("Purpose","prefetch");r.setRequestHeader("Accept","text/html");r.onreadystatechange=()=>{r.readyState===XMLHttpRequest.DONE&&200===r.status&&e(r.responseText)};r.send()}prefetchTurbolink(t){const{doc:e}=this;this.fetchPage(t,(r=>{e.open();e.write(r);e.close();this.fetchers[t]=null;const s=window.Turbolinks.Snapshot.fromHTMLElement(e.documentElement);s.isFresh=true;this.controller.cache.put(t,s)}))}prefetch(t){this.prefetched(t)||this.prefetchTurbolink(t)}prefetched(t){const e=location.href===t||this.controller.cache.has(t);const r=this.controller.cache.get(t);return e&&r.isFresh}prefetching(t){return!!this.fetchers[t]}isAction(t){return"advance"==t||"replace"==t||"restore"==t}getActionForLink(t){const{controller:e}=this;const r=e.getVisitableLocationForLink(t);const s=e.cache.get(r);if(s&&s.isFresh){s.isFresh=false;e.cache.put(t,s);return"restore"}const i=t.getAttribute("data-turbolinks-action");return this.isAction(i)?i:"advance"}}class index{static start(t){if(!window.Turbolinks){console.error("window.Turbolinks not found, you must import Turbolinks with global.");return}const e=new Prefetcher(window.Turbolinks.controller);e.start(t)}}export default index;

